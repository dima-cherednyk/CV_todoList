{"version":3,"sources":["utils/fetchClient.ts","types/FilterOption.ts","api/todos.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/Footer/Footer.tsx","types/NotificationType.ts","components/Header/Header.tsx","components/Error/Error.tsx","components/Notification/Notification.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","FilterOption","client","getTodos","userId","a","addNewTodo","todo","deleteTodo","todoId","checkboxTodo","completed","changeTitles","title","getUserByEmail","email","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","NotificationType","Footer","todos","deleteCompleted","filterTodos","filterOption","isAdding","length","data-cy","filter","href","selected","all","onClick","active","every","Header","newTodoField","toNameTodo","toggleAll","newTodoTitle","setNewTodoTitle","aria-label","ref","errorText","closeNotification","hidden","Notification","notification","TodoItem","removeOneTodo","todoAction","changeOneTodoStatus","editTodo","editingTodo","changeTitle","newName","setNewName","focusOnEditingTodo","setFocusOnEditingTodo","editingTodoField","useRef","current","focus","String","onBlur","defaultValue","onKeyDown","code","onDoubleClick","includes","TodoList","newTodoName","TransitionGroup","map","CSSTransition","timeout","createdAt","Date","updatedAt","Math","random","App","useContext","setTodos","null","setNotification","setErrorText","setFilterOption","setTodoAction","setIsAdding","setNewTodoName","setEditingTodo","loadedTodos","loadData","loadInfo","loadTodos","addTodo","todoTitle","numbers","newTodo","addToList","removeTodo","deleteTodos","filteredTodos","useMemo","changeStatus","checkTodo","changeName","forEach","todoName","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.59156534.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: {} | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: {}) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: {}) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum FilterOption {\n  active = 'active',\n  completed = 'completed',\n  all = 'all',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = async (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addNewTodo = async (todo: Todo) => {\n  return client.post<Todo[]>('/todos', todo);\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const checkboxTodo = async (todoId: number, completed: boolean) => {\n  return client.patch<Todo[]>(`/todos/${todoId}`, { completed });\n};\n\nexport const changeTitles = async (todoId: number, title: string) => {\n  return client.patch<Todo[]>(`/todos/${todoId}`, { title });\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"email\"\n              id=\"user-email\"\n              className={classNames('input', {\n                'is-danger': !needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your email\"\n              disabled={loading || needToRegister}\n              value={email}\n              required\n              onChange={e => setEmail(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n          </div>\n        </label>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n            <div\n              className={classNames('control has-icons-left', {\n                'is-loading': loading,\n              })}\n            >\n              <input\n                type=\"text\"\n                id=\"user-name\"\n                className={classNames('input', {\n                  'is-danger': needToRegister && errorMessage,\n                })}\n                placeholder=\"Enter your name\"\n                required\n                minLength={4}\n                disabled={loading}\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n            </div>\n          </label>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FilterOption } from '../../types/FilterOption';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  deleteCompleted: () => void;\n  filterTodos: (event: FilterOption) => void,\n  filterOption: FilterOption;\n  isAdding: boolean;\n};\n\nexport const Footer: React.FC<Props> = (\n  {\n    todos,\n    deleteCompleted,\n    filterTodos,\n    filterOption,\n    isAdding,\n  },\n) => {\n  return (\n    <>\n      {(todos.length > 0 || isAdding) && (\n        <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n          <span className=\"todo-count\" data-cy=\"todosCounter\">\n            {`${todos.filter(todo => !todo.completed).length} items left`}\n          </span>\n\n          <nav className=\"filter\" data-cy=\"Filter\">\n            <a\n              data-cy=\"FilterLinkAll\"\n              href=\"#/\"\n              className={classNames(\n                'filter__link',\n                {\n                  selected: filterOption === FilterOption.all,\n                },\n              )}\n              onClick={() => filterTodos(FilterOption.all)}\n            >\n              All\n            </a>\n\n            <a\n              data-cy=\"FilterLinkActive\"\n              href=\"#/active\"\n              className={classNames(\n                'filter__link',\n                {\n                  selected: filterOption === FilterOption.active,\n                },\n              )}\n              onClick={() => filterTodos(FilterOption.active)}\n            >\n              Active\n            </a>\n            <a\n              data-cy=\"FilterLinkCompleted\"\n              href=\"#/completed\"\n              className={classNames(\n                'filter__link',\n                {\n                  selected: filterOption === FilterOption.completed,\n                },\n              )}\n              onClick={() => filterTodos(FilterOption.completed)}\n            >\n              Completed\n            </a>\n          </nav>\n\n          <button\n            data-cy=\"ClearCompletedButton\"\n            type=\"button\"\n            className={classNames(\n              'todoapp__clear-completed',\n              {\n                'is-invisible': todos.every(todo => !todo.completed),\n              },\n            )}\n            onClick={() => deleteCompleted()}\n          >\n            Clear completed\n          </button>\n        </footer>\n      )}\n    </>\n  );\n};\n","export enum NotificationType {\n  success = 'success',\n  error = 'error',\n  null = 'null',\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  newTodoField: React.RefObject<HTMLInputElement>;\n  todos: Todo[];\n  toNameTodo: (title: string) => void;\n  isAdding: boolean;\n  toggleAll: () => void;\n};\n\nexport const Header: React.FC<Props> = (\n  {\n    newTodoField,\n    todos,\n    toNameTodo,\n    isAdding,\n    toggleAll,\n  },\n) => {\n  const [newTodoTitle, setNewTodoTitle] = useState<string>('');\n  const createTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    toNameTodo(newTodoTitle);\n    setNewTodoTitle('');\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      {todos.length > 0 && (\n        <button\n          data-cy=\"ToggleAllButton\"\n          type=\"button\"\n          className={classNames(\n            'todoapp__toggle-all',\n            {\n              active: todos.every(todo => todo.completed),\n            },\n          )}\n          aria-label=\"ToggleAllButton\"\n          onClick={toggleAll}\n        />\n      )}\n\n      <form onSubmit={handleSubmit}>\n        <input\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          ref={newTodoField}\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={createTodoTitle}\n          value={newTodoTitle}\n          disabled={isAdding}\n        />\n      </form>\n    </header>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  errorText: string;\n  closeNotification: () => void;\n};\n\nexport const Error: React.FC<Props> = ({ errorText, closeNotification }) => {\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={classNames(\n        'notification is-danger is-light has-text-weight-normal',\n        {\n          hidden: errorText.length === 0,\n        },\n      )}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        aria-label=\"HideErrorButton\"\n        onClick={() => closeNotification()}\n      />\n\n      {errorText === 'empty'\n        ? ('Title can\\'t be empty')\n        : (`Unable to ${errorText} a todo`)}\n    </div>\n  );\n};\n","import React from 'react';\nimport { NotificationType } from '../../types/NotificationType';\nimport { Error } from '../Error/Error';\n\ntype Props = {\n  notification: NotificationType;\n  errorText: string;\n  closeNotification: () => void;\n};\n\nexport const Notification: React.FC<Props> = (\n  {\n    notification,\n    errorText,\n    closeNotification,\n  },\n) => {\n  return (\n    <>\n      {notification === 'error' && (\n        <Error\n          errorText={errorText}\n          closeNotification={closeNotification}\n        />\n      )}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  removeOneTodo: (todoId: number) => void;\n  todoAction: number[];\n  changeOneTodoStatus: (todoId: number, completed: boolean) => void;\n  editTodo: (todoId: number, todoName: string) => void;\n  editingTodo: number;\n  changeTitle: (editingTodo: number, newName: string) => void;\n};\n\nexport const TodoItem: React.FC<Props> = (\n  {\n    todo,\n    removeOneTodo,\n    todoAction,\n    changeOneTodoStatus,\n    editTodo,\n    editingTodo,\n    changeTitle,\n  },\n) => {\n  const [newName, setNewName] = useState<string>('');\n  const [focusOnEditingTodo, setFocusOnEditingTodo] = useState<boolean>(false);\n  const editingTodoField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (editingTodoField.current) {\n      editingTodoField.current.focus();\n    }\n  }, [focusOnEditingTodo]);\n\n  const newTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewName(event.target.value);\n  };\n\n  const exitEditing = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Escape') {\n      editTodo(0, '');\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    editTodo(0, '');\n\n    if (newName === todo.title) {\n      return null;\n    }\n\n    if (!newName) {\n      return removeOneTodo(editingTodo);\n    }\n\n    return changeTitle(editingTodo, newName);\n  };\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className={classNames(\n        'todo', {\n          completed: todo.completed,\n        },\n      )}\n      key={todo.id}\n    >\n      <label htmlFor={String(todo.id)} className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          id={String(todo.id)}\n          onChange={() => changeOneTodoStatus(todo.id, !todo.completed)}\n        />\n      </label>\n\n      {editingTodo === todo.id\n        ? (\n          <form\n            onSubmit={handleSubmit}\n            onBlur={handleSubmit}\n          >\n            <input\n              data-cy=\"TodoTitleField\"\n              type=\"text\"\n              className=\"todo__title-field\"\n              placeholder=\"Empty todo will be deleted\"\n              defaultValue={todo.title}\n              onChange={newTodoTitle}\n              onKeyDown={exitEditing}\n              ref={editingTodoField}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              data-cy=\"TodoTitle\"\n              className=\"todo__title\"\n              onDoubleClick={() => {\n                editTodo(todo.id, todo.title);\n                setNewName(todo.title);\n                setFocusOnEditingTodo(!focusOnEditingTodo);\n              }}\n            >\n              {todo.title}\n            </span>\n\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              data-cy=\"TodoDeleteButton\"\n              onClick={() => removeOneTodo(todo.id)}\n            >\n              ×\n            </button>\n          </>\n        )}\n\n      {todoAction.length > 0 && (\n        <div\n          data-cy=\"TodoLoader\"\n          className={classNames(\n            'modal overlay',\n            {\n              'is-active': todoAction.includes(todo.id),\n            },\n          )}\n        >\n          <div className=\"modal-background has-background-white-ter\" />\n          <div className=\"loader\" />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  removeOneTodo: (todoId: number) => void;\n  todoAction: number[];\n  isAdding: boolean;\n  newTodoName: string;\n  user: User | null;\n  changeOneTodoStatus: (todoId: number, completed: boolean) => void;\n  editTodo: (todoId: number, todoName: string) => void;\n  editingTodo: number;\n  changeTitle: (editingTodo: number, newName: string) => void;\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    removeOneTodo,\n    todoAction,\n    isAdding,\n    newTodoName,\n    user,\n    changeOneTodoStatus,\n    editTodo,\n    editingTodo,\n    changeTitle,\n  },\n) => {\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      <TransitionGroup>\n        {todos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={todo}\n              removeOneTodo={removeOneTodo}\n              todoAction={todoAction}\n              changeOneTodoStatus={changeOneTodoStatus}\n              editTodo={editTodo}\n              editingTodo={editingTodo}\n              changeTitle={changeTitle}\n            />\n          </CSSTransition>\n        ))}\n        {isAdding && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={{\n                id: 0,\n                title: newTodoName,\n                completed: false,\n                userId: user.id,\n                createdAt: new Date(),\n                updatedAt: new Date(),\n              }}\n              todoAction={[0]}\n              removeOneTodo={removeOneTodo}\n              changeOneTodoStatus={changeOneTodoStatus}\n              editTodo={editTodo}\n              editingTodo={Math.random()}\n              changeTitle={changeTitle}\n            />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n};\n","import React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  addNewTodo,\n  changeTitles,\n  checkboxTodo,\n  deleteTodo,\n  getTodos,\n} from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport {\n  Footer,\n  Header,\n  Notification,\n  TodoList,\n} from './components';\nimport { FilterOption } from './types/FilterOption';\nimport { Todo } from './types/Todo';\nimport { NotificationType } from './types/NotificationType';\n\nexport const App: React.FC = () => {\n  const user = useContext(AuthContext);\n  const newTodoField = useRef<HTMLInputElement>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [notification, setNotification]\n    = useState<NotificationType>(NotificationType.null);\n  const [errorText, setErrorText] = useState<string>('');\n  const [filterOption, setFilterOption]\n    = useState<FilterOption>(FilterOption.all);\n  const [todoAction, setTodoAction] = useState<number[]>([]);\n  const [isAdding, setIsAdding] = useState<boolean>(false);\n  const [newTodoName, setNewTodoName] = useState<string>('');\n  const [editingTodo, setEditingTodo] = useState<number>(0);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        if (user) {\n          const loadedTodos = await getTodos(user.id);\n\n          setTodos(loadedTodos);\n        }\n      } catch {\n        setNotification(NotificationType.error);\n        setErrorText('load');\n      }\n    };\n\n    loadData();\n\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isAdding]);\n\n  const closeNotification = () => {\n    setNotification(NotificationType.null);\n    setErrorText('');\n  };\n\n  const loadInfo = async () => {\n    if (user) {\n      const loadTodos = await getTodos(user.id);\n\n      setIsAdding(false);\n      setTodos(loadTodos);\n      setTodoAction([]);\n    }\n  };\n\n  const addTodo = async (todoTitle: string) => {\n    if (!user) {\n      return null;\n    }\n\n    if (!todoTitle) {\n      setErrorText('empty');\n\n      return setNotification(NotificationType.error);\n    }\n\n    setNewTodoName(todoTitle);\n    setIsAdding(true);\n    const numbers: Todo[] = await getTodos(user.id);\n    let id;\n\n    if (numbers.length === 0) {\n      id = user.id;\n    } else {\n      id = numbers[numbers.length - 1].id + 1;\n    }\n\n    closeNotification();\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n\n    try {\n      const newTodo: Todo = {\n        id,\n        userId: user.id,\n        completed: false,\n        title: todoTitle,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      const addToList = await addNewTodo(newTodo);\n\n      loadInfo();\n\n      return addToList;\n    } catch {\n      setTodoAction([]);\n      setIsAdding(false);\n      setErrorText('add');\n\n      return setNotification(NotificationType.error);\n    }\n  };\n\n  const removeTodo = async (todoId: number) => {\n    closeNotification();\n    try {\n      const deleteTodos = await deleteTodo(todoId);\n\n      loadInfo();\n\n      return deleteTodos;\n    } catch {\n      setTodoAction([]);\n      setErrorText('delete');\n\n      return setNotification(NotificationType.error);\n    }\n  };\n\n  const removeOneTodo = (todoId: number) => {\n    setTodoAction([todoId]);\n    removeTodo(todoId);\n  };\n\n  const deleteCompleted = () => {\n    setTodoAction(todos.filter(todo => todo.completed).map(todo => todo.id));\n    const deleteCompleteTodos\n      = todos.filter(todo => todo.completed).forEach(todo => {\n        removeTodo(todo.id);\n      });\n\n    return deleteCompleteTodos;\n  };\n\n  const filterTodos = () => {\n    closeNotification();\n    switch (filterOption) {\n      case FilterOption.active:\n        return todos.filter(todo => !todo.completed);\n\n      case FilterOption.completed:\n        return todos.filter(todo => todo.completed);\n\n      case FilterOption.all:\n        return todos;\n\n      default:\n        return todos;\n    }\n  };\n\n  const filteredTodos = useMemo(filterTodos, [todos, filterOption]);\n\n  const changeStatus = async (todoId: number, completed: boolean) => {\n    closeNotification();\n    try {\n      const checkTodo = await checkboxTodo(todoId, completed);\n\n      loadInfo();\n\n      return checkTodo;\n    } catch {\n      setTodoAction([]);\n      setErrorText('update');\n\n      return setNotification(NotificationType.error);\n    }\n  };\n\n  const changeOneTodoStatus = (todoId: number, completed: boolean) => {\n    setTodoAction([todoId]);\n    changeStatus(todoId, completed);\n  };\n\n  const toggleAll = () => {\n    const statusDone = todos.every(todo => todo.completed);\n    let toggleAllTodos;\n\n    if (statusDone) {\n      setTodoAction(todos.map(todo => todo.id));\n      toggleAllTodos = todos.forEach(todo => {\n        changeStatus(todo.id, false);\n      });\n\n      return toggleAllTodos;\n    }\n\n    setTodoAction(todos.filter(todo => !todo.completed).map(todo => todo.id));\n    toggleAllTodos\n      = todos.filter(todo => !todo.completed).forEach(todo => {\n        changeStatus(todo.id, true);\n      });\n\n    return toggleAllTodos;\n  };\n\n  const editTodo = (todoId: number, todoName: string) => {\n    setEditingTodo(todoId);\n    setNewTodoName(todoName);\n  };\n\n  const changeTitle = async (todoId: number, title: string) => {\n    closeNotification();\n    try {\n      const changeName = await changeTitles(todoId, title);\n\n      setTodoAction([todoId]);\n      loadInfo();\n\n      return changeName;\n    } catch {\n      setTodoAction([]);\n      setErrorText('update');\n\n      return setNotification(NotificationType.error);\n    }\n  };\n\n  if (notification !== NotificationType.null) {\n    setTimeout(closeNotification, 3000);\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          newTodoField={newTodoField}\n          todos={todos}\n          toNameTodo={addTodo}\n          isAdding={isAdding}\n          toggleAll={toggleAll}\n        />\n\n        <TodoList\n          todos={filteredTodos}\n          removeOneTodo={removeOneTodo}\n          todoAction={todoAction}\n          isAdding={isAdding}\n          newTodoName={newTodoName}\n          user={user}\n          changeOneTodoStatus={changeOneTodoStatus}\n          editTodo={editTodo}\n          editingTodo={editingTodo}\n          changeTitle={changeTitle}\n        />\n\n        <Footer\n          todos={todos}\n          deleteCompleted={deleteCompleted}\n          filterTodos={event => setFilterOption(event)}\n          filterOption={filterOption}\n          isAdding={isAdding}\n        />\n      </div>\n\n      <Notification\n        notification={notification}\n        errorText={errorText}\n        closeNotification={closeNotification}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}